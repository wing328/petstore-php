<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
<<<<<<< HEAD

=======
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
/**
 * Order Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Order implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'Order';

    /**
<<<<<<< HEAD
      * Array of property to type mappings. Used for (de)serialization
=======
      * Array of property to type mappings. Used for (de)serialization 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'pet_id' => 'int',
        'quantity' => 'int',
        'ship_date' => '\DateTime',
        'status' => 'string',
        'complete' => 'bool'
    );
<<<<<<< HEAD

=======
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

<<<<<<< HEAD
    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
=======
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static $attributeMap = array(
        'id' => 'id',
        'pet_id' => 'petId',
        'quantity' => 'quantity',
        'ship_date' => 'shipDate',
        'status' => 'status',
        'complete' => 'complete'
    );
<<<<<<< HEAD

=======
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
<<<<<<< HEAD
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
=======
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static $setters = array(
        'id' => 'setId',
        'pet_id' => 'setPetId',
        'quantity' => 'setQuantity',
        'ship_date' => 'setShipDate',
        'status' => 'setStatus',
        'complete' => 'setComplete'
    );
<<<<<<< HEAD

=======
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static function setters() {
        return self::$setters;
    }

    /**
<<<<<<< HEAD
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
=======
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static $getters = array(
        'id' => 'getId',
        'pet_id' => 'getPetId',
        'quantity' => 'getQuantity',
        'ship_date' => 'getShipDate',
        'status' => 'getStatus',
        'complete' => 'getComplete'
    );
<<<<<<< HEAD

    static function getters()
    {
        return self::$getters;
    }

    const STATUS_PLACED = 'placed';
    const STATUS_APPROVED = 'approved';
    const STATUS_DELIVERED = 'delivered';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PLACED,
            self::STATUS_APPROVED,
            self::STATUS_DELIVERED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();
=======
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $id 
      * @var int
      */
    protected $id;
    /**
      * $pet_id 
      * @var int
      */
    protected $pet_id;
    /**
      * $quantity 
      * @var int
      */
    protected $quantity;
    /**
      * $ship_date 
      * @var \DateTime
      */
    protected $ship_date;
    /**
      * $status Order Status
      * @var string
      */
    protected $status;
    /**
      * $complete 
      * @var bool
      */
    protected $complete;
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
<<<<<<< HEAD
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pet_id'] = isset($data['pet_id']) ? $data['pet_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['ship_date'] = isset($data['ship_date']) ? $data['ship_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("placed", "approved", "delivered");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("placed", "approved", "delivered");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


=======
        
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->pet_id = $data["pet_id"];
            $this->quantity = $data["quantity"];
            $this->ship_date = $data["ship_date"];
            $this->status = $data["status"];
            $this->complete = $data["complete"];
        }
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
<<<<<<< HEAD
        return $this->container['id'];
    }

=======
        return $this->id;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
<<<<<<< HEAD
        $this->container['id'] = $id;

        return $this;
    }

=======
        
        $this->id = $id;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets pet_id
     * @return int
     */
    public function getPetId()
    {
<<<<<<< HEAD
        return $this->container['pet_id'];
    }

=======
        return $this->pet_id;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets pet_id
     * @param int $pet_id 
     * @return $this
     */
    public function setPetId($pet_id)
    {
<<<<<<< HEAD
        $this->container['pet_id'] = $pet_id;

        return $this;
    }

=======
        
        $this->pet_id = $pet_id;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
<<<<<<< HEAD
        return $this->container['quantity'];
    }

=======
        return $this->quantity;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets quantity
     * @param int $quantity 
     * @return $this
     */
    public function setQuantity($quantity)
    {
<<<<<<< HEAD
        $this->container['quantity'] = $quantity;

        return $this;
    }

=======
        
        $this->quantity = $quantity;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets ship_date
     * @return \DateTime
     */
    public function getShipDate()
    {
<<<<<<< HEAD
        return $this->container['ship_date'];
    }

=======
        return $this->ship_date;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets ship_date
     * @param \DateTime $ship_date 
     * @return $this
     */
    public function setShipDate($ship_date)
    {
<<<<<<< HEAD
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

=======
        
        $this->ship_date = $ship_date;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
<<<<<<< HEAD
        return $this->container['status'];
    }

=======
        return $this->status;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets status
     * @param string $status Order Status
     * @return $this
     */
    public function setStatus($status)
    {
<<<<<<< HEAD
        $allowed_values = array('placed', 'approved', 'delivered');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'placed', 'approved', 'delivered'");
        }
        $this->container['status'] = $status;

        return $this;
    }

=======
        $allowed_values = array("placed", "approved", "delivered");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'placed', 'approved', 'delivered'");
        }
        $this->status = $status;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets complete
     * @return bool
     */
    public function getComplete()
    {
<<<<<<< HEAD
        return $this->container['complete'];
    }

=======
        return $this->complete;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets complete
     * @param bool $complete 
     * @return $this
     */
    public function setComplete($complete)
    {
<<<<<<< HEAD
        $this->container['complete'] = $complete;

=======
        
        $this->complete = $complete;
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
<<<<<<< HEAD
     * @param  integer $offset Offset
=======
     * @param  integer $offset Offset 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
     * @return boolean
     */
    public function offsetExists($offset)
    {
<<<<<<< HEAD
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
=======
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
<<<<<<< HEAD
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
=======
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
     * @return void
     */
    public function offsetUnset($offset)
    {
<<<<<<< HEAD
        unset($this->container[$offset]);
    }

=======
        unset($this->$offset);
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
