<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
<<<<<<< HEAD

=======
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
/**
 * User Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class User implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'User';

    /**
<<<<<<< HEAD
      * Array of property to type mappings. Used for (de)serialization
=======
      * Array of property to type mappings. Used for (de)serialization 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'username' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'password' => 'string',
        'phone' => 'string',
        'user_status' => 'int'
    );
<<<<<<< HEAD

=======
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

<<<<<<< HEAD
    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
=======
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static $attributeMap = array(
        'id' => 'id',
        'username' => 'username',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'password' => 'password',
        'phone' => 'phone',
        'user_status' => 'userStatus'
    );
<<<<<<< HEAD

=======
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
<<<<<<< HEAD
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
=======
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static $setters = array(
        'id' => 'setId',
        'username' => 'setUsername',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'phone' => 'setPhone',
        'user_status' => 'setUserStatus'
    );
<<<<<<< HEAD

=======
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static function setters() {
        return self::$setters;
    }

    /**
<<<<<<< HEAD
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
=======
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    static $getters = array(
        'id' => 'getId',
        'username' => 'getUsername',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'phone' => 'getPhone',
        'user_status' => 'getUserStatus'
    );
<<<<<<< HEAD

    static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();
=======
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $id 
      * @var int
      */
    protected $id;
    /**
      * $username 
      * @var string
      */
    protected $username;
    /**
      * $first_name 
      * @var string
      */
    protected $first_name;
    /**
      * $last_name 
      * @var string
      */
    protected $last_name;
    /**
      * $email 
      * @var string
      */
    protected $email;
    /**
      * $password 
      * @var string
      */
    protected $password;
    /**
      * $phone 
      * @var string
      */
    protected $phone;
    /**
      * $user_status User Status
      * @var int
      */
    protected $user_status;
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
<<<<<<< HEAD
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['user_status'] = isset($data['user_status']) ? $data['user_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


=======
        
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->username = $data["username"];
            $this->first_name = $data["first_name"];
            $this->last_name = $data["last_name"];
            $this->email = $data["email"];
            $this->password = $data["password"];
            $this->phone = $data["phone"];
            $this->user_status = $data["user_status"];
        }
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
<<<<<<< HEAD
        return $this->container['id'];
    }

=======
        return $this->id;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
<<<<<<< HEAD
        $this->container['id'] = $id;

        return $this;
    }

=======
        
        $this->id = $id;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
<<<<<<< HEAD
        return $this->container['username'];
    }

=======
        return $this->username;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets username
     * @param string $username 
     * @return $this
     */
    public function setUsername($username)
    {
<<<<<<< HEAD
        $this->container['username'] = $username;

        return $this;
    }

=======
        
        $this->username = $username;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
<<<<<<< HEAD
        return $this->container['first_name'];
    }

=======
        return $this->first_name;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets first_name
     * @param string $first_name 
     * @return $this
     */
    public function setFirstName($first_name)
    {
<<<<<<< HEAD
        $this->container['first_name'] = $first_name;

        return $this;
    }

=======
        
        $this->first_name = $first_name;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
<<<<<<< HEAD
        return $this->container['last_name'];
    }

=======
        return $this->last_name;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets last_name
     * @param string $last_name 
     * @return $this
     */
    public function setLastName($last_name)
    {
<<<<<<< HEAD
        $this->container['last_name'] = $last_name;

        return $this;
    }

=======
        
        $this->last_name = $last_name;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
<<<<<<< HEAD
        return $this->container['email'];
    }

=======
        return $this->email;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
<<<<<<< HEAD
        $this->container['email'] = $email;

        return $this;
    }

=======
        
        $this->email = $email;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
<<<<<<< HEAD
        return $this->container['password'];
    }

=======
        return $this->password;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets password
     * @param string $password 
     * @return $this
     */
    public function setPassword($password)
    {
<<<<<<< HEAD
        $this->container['password'] = $password;

        return $this;
    }

=======
        
        $this->password = $password;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
<<<<<<< HEAD
        return $this->container['phone'];
    }

=======
        return $this->phone;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets phone
     * @param string $phone 
     * @return $this
     */
    public function setPhone($phone)
    {
<<<<<<< HEAD
        $this->container['phone'] = $phone;

        return $this;
    }

=======
        
        $this->phone = $phone;
        return $this;
    }
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets user_status
     * @return int
     */
    public function getUserStatus()
    {
<<<<<<< HEAD
        return $this->container['user_status'];
    }

=======
        return $this->user_status;
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Sets user_status
     * @param int $user_status User Status
     * @return $this
     */
    public function setUserStatus($user_status)
    {
<<<<<<< HEAD
        $this->container['user_status'] = $user_status;

=======
        
        $this->user_status = $user_status;
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
<<<<<<< HEAD
     * @param  integer $offset Offset
=======
     * @param  integer $offset Offset 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
     * @return boolean
     */
    public function offsetExists($offset)
    {
<<<<<<< HEAD
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
=======
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
<<<<<<< HEAD
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
=======
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
     * @return void
     */
    public function offsetUnset($offset)
    {
<<<<<<< HEAD
        unset($this->container[$offset]);
    }

=======
        unset($this->$offset);
    }
  
>>>>>>> aeceb658d4ba69e49d60a9d57c324b11c1d4cd9b
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
